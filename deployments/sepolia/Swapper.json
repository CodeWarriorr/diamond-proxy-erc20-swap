{
  "address": "0xa59591Cf3d2b0Ea8e8a090b27cFe159bb8E995df",
  "abi": [
    {
      "inputs": [],
      "name": "EthAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenPoolIsMissing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "swapEtherToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapFactory",
      "outputs": [
        {
          "internalType": "contract IUniswapV3Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "universalRouter",
      "outputs": [
        {
          "internalType": "contract IUniversalRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x789026558b5fe4ed9848ccbe72930320d8131afacb8c6cb97dab4d8f13ebf65c",
  "receipt": {
    "to": null,
    "from": "0xEB0680e8fEF19f5B6490a083d5b59f6F04930B5B",
    "contractAddress": "0xa59591Cf3d2b0Ea8e8a090b27cFe159bb8E995df",
    "transactionIndex": 178,
    "gasUsed": "870328",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6172be55e66d911c70921a65a172f8ec16e6dc62862a578f4de6a43391707f29",
    "transactionHash": "0x789026558b5fe4ed9848ccbe72930320d8131afacb8c6cb97dab4d8f13ebf65c",
    "logs": [],
    "blockNumber": 5873477,
    "cumulativeGasUsed": "21374186",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "233bb78c5ef5e46d4951c65ee1d8c86e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EthAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenPoolIsMissing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"swapEtherToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV3Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"universalRouter\",\"outputs\":[{\"internalType\":\"contract IUniversalRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"codewarriorr@pm.me\",\"kind\":\"dev\",\"methods\":{\"swapEtherToToken(address,uint256)\":{\"details\":\"swaps the `msg.value` Ether to at least `minAmount` of tokens in `address`, or reverts\",\"params\":{\"minAmount\":\"The minimum amount of tokens transferred to msg.sender\",\"token\":\"The address of ERC-20 token to swap\"},\"returns\":{\"_0\":\"The actual amount of transferred tokens\"}}},\"title\":\"Swapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Simple contract to swap Ether to ERC-20 tokens using Uniswap V3 through Universal Router\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swapper.sol\":\"Swapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@uniswap/universal-router/contracts/interfaces/IRewardsCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport {ERC20} from 'solmate/src/tokens/ERC20.sol';\\n\\n/// @title LooksRare Rewards Collector\\n/// @notice Implements a permissionless call to fetch LooksRare rewards earned by Universal Router users\\n/// and transfers them to an external rewards distributor contract\\ninterface IRewardsCollector {\\n    /// @notice Fetches users' LooksRare rewards and sends them to the distributor contract\\n    /// @param looksRareClaim The data required by LooksRare to claim reward tokens\\n    function collectRewards(bytes calldata looksRareClaim) external;\\n}\\n\",\"keccak256\":\"0x394a3c99a6ef18c0de171e85f8c6352eb3f6f1c5165fe9a2fdc4db181dd407b2\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/universal-router/contracts/interfaces/IUniversalRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport {IERC721Receiver} from '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport {IERC1155Receiver} from '@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol';\\nimport {IRewardsCollector} from './IRewardsCollector.sol';\\n\\ninterface IUniversalRouter is IRewardsCollector, IERC721Receiver, IERC1155Receiver {\\n    /// @notice Thrown when a required command has failed\\n    error ExecutionFailed(uint256 commandIndex, bytes message);\\n\\n    /// @notice Thrown when attempting to send ETH directly to the contract\\n    error ETHNotAccepted();\\n\\n    /// @notice Thrown when executing commands with an expired deadline\\n    error TransactionDeadlinePassed();\\n\\n    /// @notice Thrown when attempting to execute commands and an incorrect number of inputs are provided\\n    error LengthMismatch();\\n\\n    /// @notice Executes encoded commands along with provided inputs. Reverts if deadline has expired.\\n    /// @param commands A set of concatenated commands, each 1 byte in length\\n    /// @param inputs An array of byte strings containing abi encoded inputs for each command\\n    /// @param deadline The deadline by which the transaction must be executed\\n    function execute(bytes calldata commands, bytes[] calldata inputs, uint256 deadline) external payable;\\n}\\n\",\"keccak256\":\"0x417bd7e38a2373a7560004b38aab6987b4e0c655574d18c879a562dcff275e00\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/universal-router/contracts/libraries/Commands.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\n/// @title Commands\\n/// @notice Command Flags used to decode commands\\nlibrary Commands {\\n    // Masks to extract certain bits of commands\\n    bytes1 internal constant FLAG_ALLOW_REVERT = 0x80;\\n    bytes1 internal constant COMMAND_TYPE_MASK = 0x3f;\\n\\n    // Command Types. Maximum supported command at this moment is 0x3f.\\n\\n    // Command Types where value<0x08, executed in the first nested-if block\\n    uint256 constant V3_SWAP_EXACT_IN = 0x00;\\n    uint256 constant V3_SWAP_EXACT_OUT = 0x01;\\n    uint256 constant PERMIT2_TRANSFER_FROM = 0x02;\\n    uint256 constant PERMIT2_PERMIT_BATCH = 0x03;\\n    uint256 constant SWEEP = 0x04;\\n    uint256 constant TRANSFER = 0x05;\\n    uint256 constant PAY_PORTION = 0x06;\\n    // COMMAND_PLACEHOLDER = 0x07;\\n\\n    // The commands are executed in nested if blocks to minimise gas consumption\\n    // The following constant defines one of the boundaries where the if blocks split commands\\n    uint256 constant FIRST_IF_BOUNDARY = 0x08;\\n\\n    // Command Types where 0x08<=value<=0x0f, executed in the second nested-if block\\n    uint256 constant V2_SWAP_EXACT_IN = 0x08;\\n    uint256 constant V2_SWAP_EXACT_OUT = 0x09;\\n    uint256 constant PERMIT2_PERMIT = 0x0a;\\n    uint256 constant WRAP_ETH = 0x0b;\\n    uint256 constant UNWRAP_WETH = 0x0c;\\n    uint256 constant PERMIT2_TRANSFER_FROM_BATCH = 0x0d;\\n    uint256 constant BALANCE_CHECK_ERC20 = 0x0e;\\n    // COMMAND_PLACEHOLDER = 0x0f;\\n\\n    // The commands are executed in nested if blocks to minimise gas consumption\\n    // The following constant defines one of the boundaries where the if blocks split commands\\n    uint256 constant SECOND_IF_BOUNDARY = 0x10;\\n\\n    // Command Types where 0x10<=value<0x18, executed in the third nested-if block\\n    uint256 constant SEAPORT_V1_5 = 0x10;\\n    uint256 constant LOOKS_RARE_V2 = 0x11;\\n    uint256 constant NFTX = 0x12;\\n    uint256 constant CRYPTOPUNKS = 0x13;\\n    // 0x14;\\n    uint256 constant OWNER_CHECK_721 = 0x15;\\n    uint256 constant OWNER_CHECK_1155 = 0x16;\\n    uint256 constant SWEEP_ERC721 = 0x17;\\n\\n    // The commands are executed in nested if blocks to minimise gas consumption\\n    // The following constant defines one of the boundaries where the if blocks split commands\\n    uint256 constant THIRD_IF_BOUNDARY = 0x18;\\n\\n    // Command Types where 0x18<=value<=0x1f, executed in the final nested-if block\\n    uint256 constant X2Y2_721 = 0x18;\\n    uint256 constant SUDOSWAP = 0x19;\\n    uint256 constant NFT20 = 0x1a;\\n    uint256 constant X2Y2_1155 = 0x1b;\\n    uint256 constant FOUNDATION = 0x1c;\\n    uint256 constant SWEEP_ERC1155 = 0x1d;\\n    uint256 constant ELEMENT_MARKET = 0x1e;\\n    // COMMAND_PLACEHOLDER = 0x1f;\\n\\n    // The commands are executed in nested if blocks to minimise gas consumption\\n    // The following constant defines one of the boundaries where the if blocks split commands\\n    uint256 constant FOURTH_IF_BOUNDARY = 0x20;\\n\\n    // Command Types where 0x20<=value\\n    uint256 constant SEAPORT_V1_4 = 0x20;\\n    uint256 constant EXECUTE_SUB_PLAN = 0x21;\\n    uint256 constant APPROVE_ERC20 = 0x22;\\n    // COMMAND_PLACEHOLDER for 0x23 to 0x3f (all unused)\\n}\\n\",\"keccak256\":\"0x7495192865b4cdd91d2469183c4550ac621669f77a0c8952a53d3c287410f64f\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\nimport { ERC20Swapper } from \\\"./interfaces/ERC20Swapper.sol\\\";\\nimport { IUniswapV3Factory } from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\nimport { IUniversalRouter } from \\\"@uniswap/universal-router/contracts/interfaces/IUniversalRouter.sol\\\";\\nimport { Commands } from \\\"@uniswap/universal-router/contracts/libraries/Commands.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Swapper\\n * @author codewarriorr@pm.me\\n * @notice Simple contract to swap Ether to ERC-20 tokens using Uniswap V3 through Universal Router\\n */\\ncontract Swapper is ERC20Swapper {\\n    IUniswapV3Factory public constant uniswapFactory = IUniswapV3Factory(0x0227628f3F023bb0B980b67D528571c95c6DaC1c); // uniswap v3 factory (sepolia)\\n    IUniversalRouter public constant universalRouter = IUniversalRouter(0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD); // uniswap universal router (sepolia)\\n    address public constant WETH = 0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14; // wrapped eth (sepolia)\\n\\n    event Swapped(address indexed wallet, address indexed token, uint amount);\\n\\n    error EthAmountIsZero();\\n    error TokenPoolIsMissing();\\n\\n    function swapEtherToToken(address token, uint minAmount) public payable returns (uint) {\\n        if (msg.value == 0) {\\n            revert EthAmountIsZero();\\n        }\\n\\n        uint256 deadline = block.timestamp + 15;\\n        uint24 fee = 3000;\\n\\n        address pool = uniswapFactory.getPool(WETH, token, fee);\\n        if (pool == address(0)) {\\n            revert TokenPoolIsMissing();\\n        }\\n\\n        uint balanceBefore = IERC20(token).balanceOf(msg.sender);\\n\\n        IERC20(WETH).approve(address(universalRouter), msg.value);\\n\\n        bytes memory commands = new bytes(2);\\n        commands[0] = bytes1(uint8(Commands.WRAP_ETH));\\n        commands[1] = bytes1(uint8(Commands.V3_SWAP_EXACT_IN));\\n\\n        bytes[] memory inputs = new bytes[](2);\\n        inputs[0] = abi.encode(address(universalRouter), msg.value);\\n        inputs[1] = abi.encode(msg.sender, msg.value, minAmount, abi.encodePacked(WETH, fee, token), false);\\n        universalRouter.execute{ value: msg.value }(commands, inputs, deadline);\\n\\n        uint balanceAfter = IERC20(token).balanceOf(msg.sender);\\n        uint swappedAmount = balanceAfter - balanceBefore;\\n\\n        emit Swapped(msg.sender, token, swappedAmount);\\n\\n        return swappedAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x61a35b5f9ab475db5b6d44a74deac8b407c081f5788328a77a18401e15959e78\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.24;\\n\\ninterface ERC20Swapper {\\n    /// @dev swaps the `msg.value` Ether to at least `minAmount` of tokens in `address`, or reverts\\n    /// @param token The address of ERC-20 token to swap\\n    /// @param minAmount The minimum amount of tokens transferred to msg.sender\\n    /// @return The actual amount of transferred tokens\\n    function swapEtherToToken(address token, uint minAmount) external payable returns (uint);\\n}\",\"keccak256\":\"0xfaae81e3d5e2336884965716b6035a0e0810ed2b98fb85df366330d5bc889334\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ed0806100206000396000f3fe60806040526004361061003f5760003560e01c806335a9e4df146100445780637a2a04561461006f5780638bdb2afa1461009f578063ad5c4648146100ca575b600080fd5b34801561005057600080fd5b506100596100f5565b60405161006691906107d5565b60405180910390f35b61008960048036038101906100849190610869565b61010d565b60405161009691906108b8565b60405180910390f35b3480156100ab57600080fd5b506100b4610726565b6040516100c191906108f4565b60405180910390f35b3480156100d657600080fd5b506100df61073e565b6040516100ec919061091e565b60405180910390f35b733fc91a3afd70395cd496c647d5a6cc9d4b2b7fad81565b6000803403610148576040517fc8e5033400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600f426101579190610968565b90506000610bb890506000730227628f3f023bb0b980b67d528571c95c6dac1c73ffffffffffffffffffffffffffffffffffffffff16631698ee8273fff9976782d46cc05630d1f6ebab18b2324d6b1488856040518463ffffffff1660e01b81526004016101c7939291906109ba565b602060405180830381865afa1580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102089190610a06565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610270576040517f58b2257c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102ab919061091e565b602060405180830381865afa1580156102c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ec9190610a48565b905073fff9976782d46cc05630d1f6ebab18b2324d6b1473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3733fc91a3afd70395cd496c647d5a6cc9d4b2b7fad346040518363ffffffff1660e01b8152600401610351929190610a75565b6020604051808303816000875af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610ad6565b506000600267ffffffffffffffff8111156103b2576103b1610b03565b5b6040519080825280601f01601f1916602001820160405280156103e45781602001600182028036833780820191505090505b509050600b60f81b81600081518110610400576103ff610b32565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060f81b8160018151811061044857610447610b32565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600267ffffffffffffffff81111561049457610493610b03565b5b6040519080825280602002602001820160405280156104c757816020015b60608152602001906001900390816104b25790505b509050733fc91a3afd70395cd496c647d5a6cc9d4b2b7fad346040516020016104f1929190610a75565b6040516020818303038152906040528160008151811061051457610513610b32565b5b602002602001018190525033348973fff9976782d46cc05630d1f6ebab18b2324d6b14888d60405160200161054b93929190610bdf565b6040516020818303038152906040526000604051602001610570959493929190610cbb565b6040516020818303038152906040528160018151811061059357610592610b32565b5b6020026020010181905250733fc91a3afd70395cd496c647d5a6cc9d4b2b7fad73ffffffffffffffffffffffffffffffffffffffff16633593564c3484848a6040518563ffffffff1660e01b81526004016105f093929190610e21565b6000604051808303818588803b15801561060957600080fd5b505af115801561061d573d6000803e3d6000fd5b505050505060008973ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161065d919061091e565b602060405180830381865afa15801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190610a48565b9050600084826106ae9190610e66565b90508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2e7f8a64aa3240292c0adfa332e1e8945dd31589fcb0bce2721fa21c69b1390f8360405161070d91906108b8565b60405180910390a3809850505050505050505092915050565b730227628f3f023bb0b980b67d528571c95c6dac1c81565b73fff9976782d46cc05630d1f6ebab18b2324d6b1481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061079b61079661079184610756565b610776565b610756565b9050919050565b60006107ad82610780565b9050919050565b60006107bf826107a2565b9050919050565b6107cf816107b4565b82525050565b60006020820190506107ea60008301846107c6565b92915050565b600080fd5b600061080082610756565b9050919050565b610810816107f5565b811461081b57600080fd5b50565b60008135905061082d81610807565b92915050565b6000819050919050565b61084681610833565b811461085157600080fd5b50565b6000813590506108638161083d565b92915050565b600080604083850312156108805761087f6107f0565b5b600061088e8582860161081e565b925050602061089f85828601610854565b9150509250929050565b6108b281610833565b82525050565b60006020820190506108cd60008301846108a9565b92915050565b60006108de826107a2565b9050919050565b6108ee816108d3565b82525050565b600060208201905061090960008301846108e5565b92915050565b610918816107f5565b82525050565b6000602082019050610933600083018461090f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061097382610833565b915061097e83610833565b925082820190508082111561099657610995610939565b5b92915050565b600062ffffff82169050919050565b6109b48161099c565b82525050565b60006060820190506109cf600083018661090f565b6109dc602083018561090f565b6109e960408301846109ab565b949350505050565b600081519050610a0081610807565b92915050565b600060208284031215610a1c57610a1b6107f0565b5b6000610a2a848285016109f1565b91505092915050565b600081519050610a428161083d565b92915050565b600060208284031215610a5e57610a5d6107f0565b5b6000610a6c84828501610a33565b91505092915050565b6000604082019050610a8a600083018561090f565b610a9760208301846108a9565b9392505050565b60008115159050919050565b610ab381610a9e565b8114610abe57600080fd5b50565b600081519050610ad081610aaa565b92915050565b600060208284031215610aec57610aeb6107f0565b5b6000610afa84828501610ac1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160601b9050919050565b6000610b7982610b61565b9050919050565b6000610b8b82610b6e565b9050919050565b610ba3610b9e826107f5565b610b80565b82525050565b60008160e81b9050919050565b6000610bc182610ba9565b9050919050565b610bd9610bd48261099c565b610bb6565b82525050565b6000610beb8286610b92565b601482019150610bfb8285610bc8565b600382019150610c0b8284610b92565b601482019150819050949350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c56578082015181840152602081019050610c3b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610c7e82610c1c565b610c888185610c27565b9350610c98818560208601610c38565b610ca181610c62565b840191505092915050565b610cb581610a9e565b82525050565b600060a082019050610cd0600083018861090f565b610cdd60208301876108a9565b610cea60408301866108a9565b8181036060830152610cfc8185610c73565b9050610d0b6080830184610cac565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610d5d82610c1c565b610d678185610d41565b9350610d77818560208601610c38565b610d8081610c62565b840191505092915050565b6000610d978383610d52565b905092915050565b6000602082019050919050565b6000610db782610d15565b610dc18185610d20565b935083602082028501610dd385610d31565b8060005b85811015610e0f5784840389528151610df08582610d8b565b9450610dfb83610d9f565b925060208a01995050600181019050610dd7565b50829750879550505050505092915050565b60006060820190508181036000830152610e3b8186610c73565b90508181036020830152610e4f8185610dac565b9050610e5e60408301846108a9565b949350505050565b6000610e7182610833565b9150610e7c83610833565b9250828203905081811115610e9457610e93610939565b5b9291505056fea26469706673582212200ff1b8c8e5579b8b8bfbd4851099561eeec1ef62a9da67805e1d2ae1f9bb4d5364736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c806335a9e4df146100445780637a2a04561461006f5780638bdb2afa1461009f578063ad5c4648146100ca575b600080fd5b34801561005057600080fd5b506100596100f5565b60405161006691906107d5565b60405180910390f35b61008960048036038101906100849190610869565b61010d565b60405161009691906108b8565b60405180910390f35b3480156100ab57600080fd5b506100b4610726565b6040516100c191906108f4565b60405180910390f35b3480156100d657600080fd5b506100df61073e565b6040516100ec919061091e565b60405180910390f35b733fc91a3afd70395cd496c647d5a6cc9d4b2b7fad81565b6000803403610148576040517fc8e5033400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600f426101579190610968565b90506000610bb890506000730227628f3f023bb0b980b67d528571c95c6dac1c73ffffffffffffffffffffffffffffffffffffffff16631698ee8273fff9976782d46cc05630d1f6ebab18b2324d6b1488856040518463ffffffff1660e01b81526004016101c7939291906109ba565b602060405180830381865afa1580156101e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102089190610a06565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610270576040517f58b2257c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016102ab919061091e565b602060405180830381865afa1580156102c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ec9190610a48565b905073fff9976782d46cc05630d1f6ebab18b2324d6b1473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3733fc91a3afd70395cd496c647d5a6cc9d4b2b7fad346040518363ffffffff1660e01b8152600401610351929190610a75565b6020604051808303816000875af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610ad6565b506000600267ffffffffffffffff8111156103b2576103b1610b03565b5b6040519080825280601f01601f1916602001820160405280156103e45781602001600182028036833780820191505090505b509050600b60f81b81600081518110610400576103ff610b32565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060f81b8160018151811061044857610447610b32565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600267ffffffffffffffff81111561049457610493610b03565b5b6040519080825280602002602001820160405280156104c757816020015b60608152602001906001900390816104b25790505b509050733fc91a3afd70395cd496c647d5a6cc9d4b2b7fad346040516020016104f1929190610a75565b6040516020818303038152906040528160008151811061051457610513610b32565b5b602002602001018190525033348973fff9976782d46cc05630d1f6ebab18b2324d6b14888d60405160200161054b93929190610bdf565b6040516020818303038152906040526000604051602001610570959493929190610cbb565b6040516020818303038152906040528160018151811061059357610592610b32565b5b6020026020010181905250733fc91a3afd70395cd496c647d5a6cc9d4b2b7fad73ffffffffffffffffffffffffffffffffffffffff16633593564c3484848a6040518563ffffffff1660e01b81526004016105f093929190610e21565b6000604051808303818588803b15801561060957600080fd5b505af115801561061d573d6000803e3d6000fd5b505050505060008973ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161065d919061091e565b602060405180830381865afa15801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190610a48565b9050600084826106ae9190610e66565b90508a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2e7f8a64aa3240292c0adfa332e1e8945dd31589fcb0bce2721fa21c69b1390f8360405161070d91906108b8565b60405180910390a3809850505050505050505092915050565b730227628f3f023bb0b980b67d528571c95c6dac1c81565b73fff9976782d46cc05630d1f6ebab18b2324d6b1481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061079b61079661079184610756565b610776565b610756565b9050919050565b60006107ad82610780565b9050919050565b60006107bf826107a2565b9050919050565b6107cf816107b4565b82525050565b60006020820190506107ea60008301846107c6565b92915050565b600080fd5b600061080082610756565b9050919050565b610810816107f5565b811461081b57600080fd5b50565b60008135905061082d81610807565b92915050565b6000819050919050565b61084681610833565b811461085157600080fd5b50565b6000813590506108638161083d565b92915050565b600080604083850312156108805761087f6107f0565b5b600061088e8582860161081e565b925050602061089f85828601610854565b9150509250929050565b6108b281610833565b82525050565b60006020820190506108cd60008301846108a9565b92915050565b60006108de826107a2565b9050919050565b6108ee816108d3565b82525050565b600060208201905061090960008301846108e5565b92915050565b610918816107f5565b82525050565b6000602082019050610933600083018461090f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061097382610833565b915061097e83610833565b925082820190508082111561099657610995610939565b5b92915050565b600062ffffff82169050919050565b6109b48161099c565b82525050565b60006060820190506109cf600083018661090f565b6109dc602083018561090f565b6109e960408301846109ab565b949350505050565b600081519050610a0081610807565b92915050565b600060208284031215610a1c57610a1b6107f0565b5b6000610a2a848285016109f1565b91505092915050565b600081519050610a428161083d565b92915050565b600060208284031215610a5e57610a5d6107f0565b5b6000610a6c84828501610a33565b91505092915050565b6000604082019050610a8a600083018561090f565b610a9760208301846108a9565b9392505050565b60008115159050919050565b610ab381610a9e565b8114610abe57600080fd5b50565b600081519050610ad081610aaa565b92915050565b600060208284031215610aec57610aeb6107f0565b5b6000610afa84828501610ac1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160601b9050919050565b6000610b7982610b61565b9050919050565b6000610b8b82610b6e565b9050919050565b610ba3610b9e826107f5565b610b80565b82525050565b60008160e81b9050919050565b6000610bc182610ba9565b9050919050565b610bd9610bd48261099c565b610bb6565b82525050565b6000610beb8286610b92565b601482019150610bfb8285610bc8565b600382019150610c0b8284610b92565b601482019150819050949350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c56578082015181840152602081019050610c3b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610c7e82610c1c565b610c888185610c27565b9350610c98818560208601610c38565b610ca181610c62565b840191505092915050565b610cb581610a9e565b82525050565b600060a082019050610cd0600083018861090f565b610cdd60208301876108a9565b610cea60408301866108a9565b8181036060830152610cfc8185610c73565b9050610d0b6080830184610cac565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610d5d82610c1c565b610d678185610d41565b9350610d77818560208601610c38565b610d8081610c62565b840191505092915050565b6000610d978383610d52565b905092915050565b6000602082019050919050565b6000610db782610d15565b610dc18185610d20565b935083602082028501610dd385610d31565b8060005b85811015610e0f5784840389528151610df08582610d8b565b9450610dfb83610d9f565b925060208a01995050600181019050610dd7565b50829750879550505050505092915050565b60006060820190508181036000830152610e3b8186610c73565b90508181036020830152610e4f8185610dac565b9050610e5e60408301846108a9565b949350505050565b6000610e7182610833565b9150610e7c83610833565b9250828203905081811115610e9457610e93610939565b5b9291505056fea26469706673582212200ff1b8c8e5579b8b8bfbd4851099561eeec1ef62a9da67805e1d2ae1f9bb4d5364736f6c63430008180033",
  "devdoc": {
    "author": "codewarriorr@pm.me",
    "kind": "dev",
    "methods": {
      "swapEtherToToken(address,uint256)": {
        "details": "swaps the `msg.value` Ether to at least `minAmount` of tokens in `address`, or reverts",
        "params": {
          "minAmount": "The minimum amount of tokens transferred to msg.sender",
          "token": "The address of ERC-20 token to swap"
        },
        "returns": {
          "_0": "The actual amount of transferred tokens"
        }
      }
    },
    "title": "Swapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Simple contract to swap Ether to ERC-20 tokens using Uniswap V3 through Universal Router",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}